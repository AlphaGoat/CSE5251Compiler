/* Generated By:JavaCC: Do not edit this line. MiniJavaSemanticAnalyzer.java */
package semanticAnalysis;
import java.io.FileReader;
import java.io.FileNotFoundException;
import java.util.List;
import java.util.ArrayList;

public class MiniJavaSemanticAnalyzer implements MiniJavaSemanticAnalyzerConstants {

public static String filename;
//	public static errors.LexicalLog ll;
//public static SyntaxLog sl;
public void main(String args[]) throws ParseException, TokenMgrError {
    try {
        MiniJavaSemanticAnalyzer analyzer = new MiniJavaSemanticAnalyzer(new java.io.FileReader(args[0]));
    } catch (FileNotFoundException e) {
      System.out.println(e);
      System.exit(1);
    }
}

  final public syntax.Program Start() throws ParseException {
    trace_call("Start");
    try {
    syntax.MainClass main;
    syntax.ClassDecl c;
    List<syntax.ClassDecl> classes = new ArrayList<syntax.ClassDecl>();
      try {
        main = Main();
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CLASS:
            ;
            break;
          default:
            jj_la1[0] = jj_gen;
            break label_1;
          }
          c = Class();
                                      classes.add(c);
        }
      } catch (ParseException e) {
        System.err.println(e.getMessage());
        main = null;
        c = null;
      }
          {if (true) return new syntax.Program(main, classes);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Start");
    }
  }

  final public syntax.MainClass Main() throws ParseException {
    trace_call("Main");
    try {
  Token t1;
  Token t2;
  syntax.Identifier name;
  syntax.Identifier arg;
  syntax.Statement s;
      try {
        jj_consume_token(CLASS);
        t1 = jj_consume_token(ID);
                              name = new syntax.Identifier(t1.beginLine, t1.beginColumn, t1.image);
        jj_consume_token(LBRACK);
        jj_consume_token(PUBLIC);
        jj_consume_token(STAT);
        jj_consume_token(VOID);
        jj_consume_token(MAIN);
        jj_consume_token(LPAREN);
        jj_consume_token(STRING);
        jj_consume_token(LBRACE);
        jj_consume_token(RBRACE);
        t2 = jj_consume_token(ID);
                      arg = new syntax.Identifier(t2.beginLine, t2.beginColumn, t2.image);
        jj_consume_token(RPAREN);
        jj_consume_token(LBRACK);
        s = Stm();
        jj_consume_token(RBRACK);
        jj_consume_token(RBRACK);
      } catch (ParseException e) {
                System.err.println(e.getMessage());
                error_skipto(new Token(RBRACK, "}"));
                name = null;
                arg = null;
                s = null;
      }
      {if (true) return new syntax.MainClass(name, arg, s);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Main");
    }
  }

  final public syntax.ClassDecl Class() throws ParseException {
    trace_call("Class");
    try {
  syntax.ClassDecl c;
      try {
        if (jj_2_1(3)) {
          c = ExtendingClass();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CLASS:
            c = SimpleClass();
            break;
          default:
            jj_la1[1] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (ParseException e) {
    System.err.println(e.getMessage());
    c = null; // Dummy declaration

      }
    {if (true) return c;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Class");
    }
  }

  final public syntax.SimpleClassDecl SimpleClass() throws ParseException {
    trace_call("SimpleClass");
    try {
  Token t1;
  Token t2;
  syntax.Identifier cName;
  syntax.IdentifierDecl f;
  syntax.MethodDecl m;
  List<syntax.FieldDecl> fields = new ArrayList<syntax.FieldDecl>();
  List<syntax.MethodDecl> methods = new ArrayList<syntax.MethodDecl>();
      try {
        jj_consume_token(CLASS);
        t1 = jj_consume_token(ID);
                              cName = new syntax.Identifier(t1.beginLine, t1.beginColumn, t1.image);
        jj_consume_token(LBRACK);
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOLEAN:
          case INTEGER:
          case PUBLIC:
          case ID:
            ;
            break;
          default:
            jj_la1[2] = jj_gen;
            break label_2;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOLEAN:
          case INTEGER:
          case ID:
            f = Var("fields");
                                    fields.add( (syntax.FieldDecl) f);
            break;
          case PUBLIC:
            m = Method();
                                  methods.add(m);
            break;
          default:
            jj_la1[3] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(RBRACK);
      } catch (ParseException ex) {
                System.err.println(ex.getMessage());
                error_skipto(new Token(RBRACK,"}"));
                cName = null;
                fields = null;
                methods = null;
      }
      {if (true) return new syntax.SimpleClassDecl(cName, fields, methods);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("SimpleClass");
    }
  }

  final public syntax.ExtendingClassDecl ExtendingClass() throws ParseException {
    trace_call("ExtendingClass");
    try {
  Token t1;
  Token t2;
  syntax.Identifier cName;
  syntax.Identifier exName;
  syntax.IdentifierDecl f;
  syntax.MethodDecl m;
  List<syntax.FieldDecl> fields = new ArrayList<syntax.FieldDecl>();
  List<syntax.MethodDecl> methods = new ArrayList<syntax.MethodDecl>();
      try {
        jj_consume_token(CLASS);
        t1 = jj_consume_token(ID);
                              cName = new syntax.Identifier(t1.beginLine, t1.beginColumn, t1.image);
        jj_consume_token(EXTENDS);
        t2 = jj_consume_token(ID);
                               exName = new syntax.Identifier(t2.beginLine, t2.beginColumn, t2.image);
        jj_consume_token(LBRACK);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOLEAN:
          case INTEGER:
          case PUBLIC:
          case ID:
            ;
            break;
          default:
            jj_la1[4] = jj_gen;
            break label_3;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOLEAN:
          case INTEGER:
          case ID:
            f = Var("fields");
                                    fields.add( (syntax.FieldDecl) f);
            break;
          case PUBLIC:
            m = Method();
                                  methods.add(m);
            break;
          default:
            jj_la1[5] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(RBRACK);
      } catch (ParseException ex) {
                System.err.println(ex.getMessage());
                error_skipto(new Token(RBRACK, "}"));
                cName = null;
                exName = null;
                fields = null;
                methods = null;
      }
          {if (true) return new syntax.ExtendingClassDecl(cName, exName, fields, methods);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("ExtendingClass");
    }
  }

  final public syntax.IdentifierDecl Var(String varType) throws ParseException {
    trace_call("Var");
    try {
    syntax.Type at;
    Token t;
    syntax.Identifier ai;
      try {
        at = TypeProd();
        t = jj_consume_token(ID);
                                           ai = new syntax.Identifier(t.beginLine, t.beginColumn, t.image);
        jj_consume_token(SEMI);
      } catch (ParseException e) {
                System.err.println(e.getMessage());
                error_skipto(new Token(SEMI, ";"));
                at = null;
                ai = null;
      }
          if ( varType.equals("fields") ){ {if (true) return new syntax.FieldDecl(at, ai);} }
         else { {if (true) return new syntax.LocalDecl(at, ai);} }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Var");
    }
  }

  final public syntax.Type TypeProd() throws ParseException {
    trace_call("TypeProd");
    try {
  Token t;
  syntax.Type ret;
      try {
        if (jj_2_2(2)) {
          t = jj_consume_token(INTEGER);
          jj_consume_token(LBRACE);
          jj_consume_token(RBRACE);
                                            ret = syntax.Type.THE_INT_ARRAY_TYPE;
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEGER:
            t = jj_consume_token(INTEGER);
                           ret = syntax.Type.THE_INTEGER_TYPE;
            break;
          case BOOLEAN:
            t = jj_consume_token(BOOLEAN);
                       ret = syntax.Type.THE_BOOLEAN_TYPE;
            break;
          case ID:
            t = jj_consume_token(ID);
                  ret = new syntax.IdentifierType(t.beginLine, t.beginColumn, t.image);
            break;
          default:
            jj_la1[6] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (ParseException e) {
    System.err.println(e.getMessage());
    ret = null;
      }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("TypeProd");
    }
  }

  final public syntax.MethodDecl Method() throws ParseException {
    trace_call("Method");
    try {
  // Method name and args 
  syntax.Type rType;
  syntax.Type aType;
  Token t1;
  Token t2;
  syntax.Identifier mName;
  syntax.Identifier argName;
  List<syntax.FormalDecl> afl = new ArrayList<syntax.FormalDecl>();

  // Method body
  syntax.IdentifierDecl l;
  List<syntax.LocalDecl> ll = new ArrayList<syntax.LocalDecl>();
  syntax.Statement s;
  List<syntax.Statement> sl = new ArrayList<syntax.Statement>();
  syntax.Expression ae;
      try {
        jj_consume_token(PUBLIC);
        rType = TypeProd();
        t1 = jj_consume_token(ID);
                                                mName = new syntax.Identifier(t1.beginLine, t1.beginColumn, t1.image);
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case INTEGER:
        case ID:
          aType = TypeProd();
          t2 = jj_consume_token(ID);
                                             argName = new syntax.Identifier(t2.beginLine, t2.beginColumn, t2.image); afl.add(new syntax.FormalDecl(aType, argName));
          label_4:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[7] = jj_gen;
              break label_4;
            }
            jj_consume_token(COMMA);
            aType = TypeProd();
            t2 = jj_consume_token(ID);
                                                     argName = new syntax.Identifier(t2.beginLine, t2.beginColumn, t2.image); afl.add(new syntax.FormalDecl(aType, argName));
          }
          break;
        default:
          jj_la1[8] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
        jj_consume_token(LBRACK);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOLEAN:
          case INTEGER:
          case IF:
          case WHILE:
          case PRINT:
          case ID:
          case LBRACK:
          case NOT_RECOGNIZED:
            ;
            break;
          default:
            jj_la1[9] = jj_gen;
            break label_5;
          }
          if (jj_2_3(2)) {
            l = Var("local");
                                              ll.add( (syntax.LocalDecl) l);
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IF:
            case WHILE:
            case PRINT:
            case ID:
            case LBRACK:
              s = Stm();
                                                                                             sl.add(s);
              break;
            case NOT_RECOGNIZED:
              ErrorProduction();
              break;
            default:
              jj_la1[10] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
        jj_consume_token(RETURN);
        ae = Exp();
        jj_consume_token(SEMI);
        jj_consume_token(RBRACK);
      } catch (ParseException e) {
                System.err.println(e.getMessage());
                error_skipto(new Token(RBRACK, "}"));
                rType = null;
                mName = null;
                afl = null;
                ll = null;
                sl = null;
                ae = null;
      }
      {if (true) return new syntax.MethodDecl(rType, mName, afl, ll, sl, ae);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Method");
    }
  }

  final public syntax.Statement Stm() throws ParseException {
    trace_call("Stm");
    try {
    Token t;
    syntax.Statement as;
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
          as = IfStm();
          break;
        case WHILE:
          as = WhileStm();
          break;
        case PRINT:
          as = PrintStm();
          break;
        default:
          jj_la1[11] = jj_gen;
          if (jj_2_4(2)) {
            as = AssignStm();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ID:
              as = ArrayAssignStm();
              break;
            case LBRACK:
              as = BracketedStm();
              break;
            default:
              jj_la1[12] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      } catch (ParseException e) {
            System.err.println(e.getMessage());
//	    error_skipto(new Token(SEMI, ";"));
            as = null;
      }
          {if (true) return as;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Stm");
    }
  }

  final public syntax.ArrayAssign ArrayAssignStm() throws ParseException {
    trace_call("ArrayAssignStm");
    try {
    Token t;
    syntax.Identifier nameOfArray;
    syntax.Expression indexInArray;
    syntax.Expression e;
      try {
        t = jj_consume_token(ID);
                   nameOfArray = new syntax.Identifier(t.beginLine, t.beginColumn, t.image);
        jj_consume_token(LBRACE);
        indexInArray = Exp();
        jj_consume_token(RBRACE);
        jj_consume_token(ASSIGN);
        e = Exp();
        jj_consume_token(SEMI);
      } catch (ParseException em) {
        System.err.println(em.getMessage());
                error_skipto(new Token(SEMI, ";"));
                t = new Token(ID);
                nameOfArray = null;
                indexInArray = null;
                e = null;
      }
          {if (true) return new syntax.ArrayAssign(t.beginLine, t.beginColumn, nameOfArray, indexInArray, e);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("ArrayAssignStm");
    }
  }

  final public syntax.Print PrintStm() throws ParseException {
    trace_call("PrintStm");
    try {
    Token t;
    syntax.Expression ae;
      try {
        t = jj_consume_token(PRINT);
        jj_consume_token(LPAREN);
        ae = Exp();
        jj_consume_token(RPAREN);
        jj_consume_token(SEMI);
      } catch (ParseException e) {
        System.err.println(e.getMessage());
                error_skipto(new Token(SEMI, ";"));
                t = new Token(PRINT);
                ae = null;
      }
          {if (true) return new syntax.Print(t.beginLine, t.beginColumn, ae);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PrintStm");
    }
  }

  final public syntax.Assign AssignStm() throws ParseException {
    trace_call("AssignStm");
    try {
    Token t;
    syntax.Identifier ai;
    syntax.Expression ae;
      try {
        t = jj_consume_token(ID);
                 ai = new syntax.Identifier(t.beginLine, t.beginColumn, t.image);
        jj_consume_token(ASSIGN);
        ae = Exp();
        jj_consume_token(SEMI);
      } catch (ParseException e) {
        System.err.println(e.getMessage());
        error_skipto(new Token(SEMI, ";"));
        t = new Token(ID);
        ai = null;
        ae = null;
      }
          {if (true) return new syntax.Assign(t.beginLine, t.beginColumn, ai, ae);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("AssignStm");
    }
  }

  final public syntax.If IfStm() throws ParseException {
    trace_call("IfStm");
    try {
    Token t;
    syntax.Expression ae;
    syntax.Statement as1;
    syntax.Statement as2;
      try {
        t = jj_consume_token(IF);
        jj_consume_token(LPAREN);
        ae = Exp();
        jj_consume_token(RPAREN);
        as1 = Stm();
        jj_consume_token(ELSE);
        as2 = Stm();
      } catch (ParseException e) {
        System.err.println(e.getMessage());
        error_skipto(new Token(SEMI, ";"));
        t = new Token(IF);
        ae = null;
        as1 = null;
        as2 = null;
      }
          {if (true) return new syntax.If(t.beginLine, t.beginColumn, ae, as1, as2);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("IfStm");
    }
  }

  final public syntax.While WhileStm() throws ParseException {
    trace_call("WhileStm");
    try {
    Token t;
    syntax.Expression ae;
    syntax.Statement as;
      try {
        t = jj_consume_token(WHILE);
        jj_consume_token(LPAREN);
        ae = Exp();
        jj_consume_token(RPAREN);
        as = Stm();
      } catch (ParseException e) {
                System.err.println(e.getMessage());
                error_skipto(new Token(SEMI, ";"));
                t = new Token(WHILE);
                ae = null;
                as = null;
      }
          {if (true) return new syntax.While(t.beginLine, t.beginColumn, ae, as);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("WhileStm");
    }
  }

  final public syntax.Block BracketedStm() throws ParseException {
    trace_call("BracketedStm");
    try {
  Token t;
  syntax.Statement as;
  List<syntax.Statement> sl = new ArrayList<syntax.Statement>();
      try {
        t = jj_consume_token(LBRACK);
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IF:
          case WHILE:
          case PRINT:
          case ID:
          case LBRACK:
            ;
            break;
          default:
            jj_la1[13] = jj_gen;
            break label_6;
          }
          as = Stm();
                                    sl.add(as);
        }
        jj_consume_token(RBRACK);
      } catch (ParseException e) {
      System.err.println(e.getMessage());
      error_skipto(new Token(RBRACK, "}"));
      t = new Token(LBRACK);
      sl = null;
      }
    {if (true) return new syntax.Block(sl);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("BracketedStm");
    }
  }

  final public syntax.Expression Exp() throws ParseException {
    trace_call("Exp");
    try {
   Token t;
   Token tid;
   syntax.Identifier id;
   syntax.Expression e1;
   syntax.Expression re;
      try {
        re = Term();
        re = ExpPrime(re);
      } catch (ParseException ex) {
                System.err.println(ex.getMessage());
                re = null;
      }
      {if (true) return re;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Exp");
    }
  }

  final public syntax.Expression ExpPrime(syntax.Expression e) throws ParseException {
    trace_call("ExpPrime");
    try {
  Token t;
  syntax.Identifier id;
  syntax.Expression ae;
  syntax.Expression re = e;
  List<syntax.Expression> el = new ArrayList<syntax.Expression>();
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
        case PLUS:
        case MINUS:
        case PERIOD:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PLUS:
            t = jj_consume_token(PLUS);
            ae = Term();
                                   re = new syntax.Plus(t.beginLine, t. beginColumn, e, ae);
            re = ExpPrime(re);
            break;
          case MINUS:
            t = jj_consume_token(MINUS);
            ae = Term();
                                     re = new syntax.Minus(t.beginLine, t.beginColumn, e, ae);
            re = ExpPrime(re);
            break;
          case LBRACE:
            jj_consume_token(LBRACE);
            ae = Exp();
            jj_consume_token(RBRACE);
                               re = new syntax.ArrayLookup(e.lineNumber, e.columnNumber, e, ae);
            re = ExpPrime(re);
            break;
          default:
            jj_la1[16] = jj_gen;
            if (jj_2_5(2)) {
              jj_consume_token(PERIOD);
              jj_consume_token(LENGTH);
                                      re = new syntax.ArrayLength(e.lineNumber, e.columnNumber, e);
              re = ExpPrime(re);
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case PERIOD:
                jj_consume_token(PERIOD);
                t = jj_consume_token(ID);
                         id = new syntax.Identifier(t.beginLine, t.beginColumn, t.image);
                jj_consume_token(LPAREN);
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case THIS:
                case NEW:
                case TRUE:
                case FALSE:
                case ID:
                case NUM:
                case LPAREN:
                case BANG:
                  ae = Exp();
                             el.add(ae);
                  label_7:
                  while (true) {
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case COMMA:
                      ;
                      break;
                    default:
                      jj_la1[14] = jj_gen;
                      break label_7;
                    }
                    jj_consume_token(COMMA);
                    ae = Exp();
                                                              el.add(ae);
                  }
                  break;
                default:
                  jj_la1[15] = jj_gen;
                  ;
                }
                jj_consume_token(RPAREN);
                  re = new syntax.Call(e.lineNumber, e.columnNumber, e, id, el);
                re = ExpPrime(re);
                break;
              default:
                jj_la1[17] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
          break;
        default:
          jj_la1[18] = jj_gen;
          ;
        }
      } catch (ParseException ex) {
                System.err.println(ex.getMessage());
                re = null;
      }
      {if (true) return re;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("ExpPrime");
    }
  }

  final public syntax.Expression Term() throws ParseException {
    trace_call("Term");
    try {
  syntax.Expression re;
      try {
        re = Factor();
        re = TermPrime(re);
      } catch (ParseException e) {
        System.err.println(e.getMessage());
        re = null;
      }
      {if (true) return re;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Term");
    }
  }

  final public syntax.Expression TermPrime(syntax.Expression e) throws ParseException {
    trace_call("TermPrime");
    try {
  syntax.Expression ae;
  syntax.Expression re = e;
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
          jj_consume_token(STAR);
          ae = Factor();
                             re = new syntax.Times(e.lineNumber, e.columnNumber, e, ae);
          re = TermPrime(re);
          break;
        default:
          jj_la1[19] = jj_gen;
          ;
        }
      } catch (ParseException em) {
       System.err.println(em.getMessage());
      }
      {if (true) return re;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("TermPrime");
    }
  }

  final public syntax.Expression Factor() throws ParseException {
    trace_call("Factor");
    try {
  syntax.Expression re;
      try {
        re = Relation();
        re = FactorPrime(re);
      } catch (ParseException e) {
                System.err.println(e.getMessage());
                re = null;
      }
      {if (true) return re;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Factor");
    }
  }

  final public syntax.Expression FactorPrime(syntax.Expression e) throws ParseException {
    trace_call("FactorPrime");
    try {
  syntax.Expression ae;
  syntax.Expression re = e;
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LTHAN:
        case AND:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AND:
            jj_consume_token(AND);
            ae = Relation();
                                 re = new syntax.And(e, ae);
            re = FactorPrime(re);
            break;
          case LTHAN:
            jj_consume_token(LTHAN);
            ae = Relation();
                                 re = new syntax.LessThan(e, ae);
            re = FactorPrime(re);
            break;
          default:
            jj_la1[20] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[21] = jj_gen;
          ;
        }
      } catch (ParseException em) {
                System.err.println(em.getMessage());
      }
      {if (true) return re;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("FactorPrime");
    }
  }

  final public syntax.Expression Relation() throws ParseException {
    trace_call("Relation");
    try {
  Token t;
  Token tid;
  int i;
  syntax.Identifier id;
  syntax.Expression e1;
  syntax.Expression e2;
  List<syntax.Expression> el = new ArrayList<syntax.Expression>();

  syntax.Expression re;
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          t = jj_consume_token(NUM);
                       i = Integer.parseInt(t.image);
                        re = new syntax.IntegerLiteral(t.beginLine, t.beginColumn, i);
          break;
        case TRUE:
          t = jj_consume_token(TRUE);
                       re = new syntax.True(t.beginLine, t.beginColumn);
          break;
        case FALSE:
          t = jj_consume_token(FALSE);
                        re = new syntax.False(t.beginLine, t.beginColumn);
          break;
        case ID:
          t = jj_consume_token(ID);
                      re = new syntax.IdentifierExp(t.beginLine, t.beginColumn, t.image);
          break;
        case THIS:
          t = jj_consume_token(THIS);
                       re = new syntax.This(t.beginLine, t.beginColumn);
          break;
        case LPAREN:
          jj_consume_token(LPAREN);
          re = Exp();
          jj_consume_token(RPAREN);
          break;
        default:
          jj_la1[22] = jj_gen;
          if (jj_2_6(2)) {
            t = jj_consume_token(NEW);
            jj_consume_token(INTEGER);
            jj_consume_token(LBRACE);
            e1 = Exp();
            jj_consume_token(RBRACE);
                          re = new syntax.NewArray(t.beginLine, t.beginColumn, e1);
            re = ExpPrime(re);
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case NEW:
              t = jj_consume_token(NEW);
              tid = jj_consume_token(ID);
                                 id = new syntax.Identifier(tid.beginLine, tid.beginColumn, tid.image);
              jj_consume_token(LPAREN);
              jj_consume_token(RPAREN);
                          re = new  syntax.NewObject(t.beginLine, t.beginColumn, id);
              re = ExpPrime(re);
              break;
            case BANG:
              t = jj_consume_token(BANG);
              e1 = Exp();
                                  re = new syntax.Not(t.beginLine, t.beginColumn, e1);
              re = ExpPrime(re);
              break;
            default:
              jj_la1[23] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      } catch (ParseException e) {
                System.err.println(e.getMessage());
                re = null;
      }
      {if (true) return re;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Relation");
    }
  }

  final public void ErrorProduction() throws ParseException {
    trace_call("ErrorProduction");
    try {
      try {
        jj_consume_token(NOT_RECOGNIZED);
      } catch (ParseException e) {
     // Should never syntax.Print
     System.err.println(e.getMessage());
      }
    } finally {
      trace_return("ErrorProduction");
    }
  }

  void error_skipto(Token expected) throws ParseException {
    trace_call("error_skipto");
    try {
        //  Defined here:
        //  https://www.cs.purdue.edu/homes/hosking/javacc/doc/errorrecovery.html
     Token t;
         do {
            t = getNextToken();
              try {
                if (t.kind == EOF) {
                        throw new ParseException();
                }
         } catch (ParseException e) {
//     	    System.err.Printf("%s:%d.%d: Syntax Error -- Expecting a '%s'. Reached end of file while parsing.\n",
//       		e.filename, t.beginLine, t.beginColumn, expected.toString());
                break;
        }
    } while (t.kind != expected.kind);
    } finally {
      trace_return("error_skipto");
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_3R_9() {
    if (jj_3R_11()) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(INTEGER)) return true;
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(PERIOD)) return true;
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(EXTENDS)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public MiniJavaSemanticAnalyzerTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[24];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2000,0x2000,0x80004c00,0x80004c00,0x80004c00,0x80004c00,0x80000c00,0x0,0x80000c00,0x91400c00,0x91400000,0x11400000,0x80000000,0x91400000,0x0,0x8c180000,0x0,0x0,0x0,0x0,0x0,0x0,0x8c080000,0x100000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x0,0x100008,0x100008,0x0,0x8,0x8,0x100,0x40003,0x620,0x80000,0x80620,0x800,0xa000,0xa000,0x3,0x40000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[6];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MiniJavaSemanticAnalyzer(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiniJavaSemanticAnalyzer(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MiniJavaSemanticAnalyzerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MiniJavaSemanticAnalyzer(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MiniJavaSemanticAnalyzerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MiniJavaSemanticAnalyzer(MiniJavaSemanticAnalyzerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MiniJavaSemanticAnalyzerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[53];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 24; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 53; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
