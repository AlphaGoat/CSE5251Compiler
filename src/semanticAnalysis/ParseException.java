/* Generated By:JavaCC: Do not edit this line. ParseException.java Version 5.0 */
/* JavaCCOptions:KEEP_LINE_COL=null */
package semanticAnalysis;

import main.Compiler;

//import parser.MiniJavaParserConstants;
//import parser.Token;

/**
 * This exception is thrown when parse errors are encountered.
 * You can explicitly create objects of this exception type by
 * calling the method generateParseException in the generated
 * parser.
 *
 * You can modify this class to customize your error reporting
 * mechanisms so long as you retain the public fields.
 */
public class ParseException extends Exception {

  /**
   * The version identifier for this Serializable class.
   * Increment only if the <i>serialized</i> form of the
   * class changes.
   */
  private static final long serialVersionUID = 1L;

  public static int count = 0;
//  public static String filename;
  
  /**
   * This constructor is used by the method "generateParseException"
   * in the generated parser.  Calling this constructor generates
   * a new object of this type with the fields "currentToken",
   * "expectedTokenSequences", and "tokenImage" set.
   */
  public ParseException(Token currentTokenVal,
                        int[][] expectedTokenSequencesVal,
                        String[] tokenImageVal
                       )
  {
    super(initialise(currentTokenVal, expectedTokenSequencesVal, tokenImageVal));
    currentToken = currentTokenVal;
    expectedTokenSequences = expectedTokenSequencesVal;
    tokenImage = tokenImageVal;
    count++;
  }

  /**
   * The following constructors are for use by you for whatever
   * purpose you can think of.  Constructing the exception in this
   * manner makes the exception behave in the normal way - i.e., as
   * documented in the class "Throwable".  The fields "errorToken",
   * "expectedTokenSequences", and "tokenImage" do not contain
   * relevant information.  The JavaCC generated code does not use
   * these constructors.
   */

  public ParseException() {
    super();
    count++;
  }

  /** Constructor with message. */
  public ParseException(String message) {
    super(message);
    count++;
  }
  
  public ParseException(int i) {
//	  setFilename(filename);
	  setCount(i);
  }


  /**
   * This is the last token that has been consumed successfully.  If
   * this object has been created due to a parse error, the token
   * followng this token will (therefore) be the first error token.
   */
  public Token currentToken;

  /**
   * Each entry in this array is an array of integers.  Each array
   * of integers represents a sequence of tokens (by their ordinal
   * values) that is expected at this point of the parse.
   */
  public int[][] expectedTokenSequences;

  /**
   * This is a reference to the "tokenImage" array of the generated
   * parser within which the parse error occurred.  This array is
   * defined in the generated ...Constants interface.
   */
  public String[] tokenImage;

  /**
   * It uses "currentToken" and "expectedTokenSequences" to generate a parse
   * error message and returns it.  If this object has been created
   * due to a parse error, and you do not catch it (it gets thrown
   * from the parser) the correct error message
   * gets displayed.
   */
  private static String initialise(Token currentToken,
                           int[][] expectedTokenSequences,
                           String[] tokenImage) {
	  
	    String eol = System.getProperty("line.separator", "\n");
	    StringBuffer expected = new StringBuffer();
	    int maxSize = 0;
	    for (int i = 0; i < expectedTokenSequences.length; i++) {
	      if (maxSize < expectedTokenSequences[i].length) {
	        maxSize = expectedTokenSequences[i].length;
	      }
	      for (int j = 0; j < expectedTokenSequences[i].length; j++) {
	    	if (tokenImage[expectedTokenSequences[i][j]].equals("<NOT_RECOGNIZED>")) {
	    		continue;
	    	}
	        expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');
	      }
	      if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {
	        expected.append("...");
	      }
	      expected.append(eol).append("    ");
	    }
	    String retval = Compiler.filename + ":" + currentToken.next.beginLine + "." + currentToken.next.beginColumn + ": Syntax Error --";
	    Token tok = currentToken.next;
	    if (tok.kind == MiniJavaSemanticAnalyzerConstants.EOF) {
	    	retval += " Reached end of file while parsing.";
	    }
	    else {
	    	retval += " Encountered ";
		    for (int i = 0; i < maxSize; i++) {
		      if (i != 0) retval += " ";
		      if (tok.kind == 0) {
		        retval += tokenImage[0];
		        break;
		      }
		//     if (tok.kind == MiniJavaParserConstants.NOT_RECOGNIZED) {
		//    	  num_lexical_errors++;
		//   	  characters.add(tok.image);
		//          line_numbers.add(tok.beginLine);
		//          col_numbers.add(tok.beginColumn); 
		//          System.out.println("not recognized error");
		//      }
		//      retval += " " + tokenImage[tok.kind];
		      retval += " \"";
		      retval += add_escapes(tok.image);
		      retval += "\"";
		      tok = tok.next;
		    }
	    }
//	    retval += "\" at line " + currentToken.next.beginLine + ", column " + currentToken.next.beginColumn;
	    retval += "." + eol;
	    if (expectedTokenSequences.length == 1) {
	      retval += "Was expecting:" + eol + "    ";
	    } else {
	      retval += "Was expecting one of:" + eol + "    ";
	    }
	    retval += expected.toString();
	    return retval;
 
  }

  /**
   * The end of line string for this machine.
   */
  protected String eol = System.getProperty("line.separator", "\n");

  /**
   * Used to convert raw characters to their escaped version
   * when these raw version cannot be used as part of an ASCII
   * string literal.
   */
  static String add_escapes(String str) {
      StringBuffer retval = new StringBuffer();
      char ch;
      for (int i = 0; i < str.length(); i++) {
        switch (str.charAt(i))
        {
           case 0 :
              continue;
           case '\b':
              retval.append("\\b");
              continue;
           case '\t':
              retval.append("\\t");
              continue;
           case '\n':
              retval.append("\\n");
              continue;
           case '\f':
              retval.append("\\f");
              continue;
           case '\r':
              retval.append("\\r");
              continue;
           case '\"':
              retval.append("\\\"");
              continue;
           case '\'':
              retval.append("\\\'");
              continue;
           case '\\':
              retval.append("\\\\");
              continue;
           default:
              if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {
                 String s = "0000" + Integer.toString(ch, 16);
                 retval.append("\\u" + s.substring(s.length() - 4, s.length()));
              } else {
                 retval.append(ch);
              }
              continue;
        }
      }
      return retval.toString();
   }
  
  public static void setCount(int i) {
	  count = i;
  }
  
  public static int getCount() {
	  return count;
  }

}
/* JavaCC - OriginalChecksum=249a64bab9af9e9a7b9d1496d963d6c7 (do not edit this line) */
